{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addMovie","useState","movieTitle","setMovieTitle","movieIsNotFound","setMovieIsNotFound","setMovie","loading","setLoading","onSubmit","event","query","preventDefault","fetch","then","res","json","catch","Response","Error","result","Title","Plot","Poster","imdbID","finally","htmlFor","type","id","placeholder","value","onChange","target","disabled","length","onClick","undefined","App","setMovies","newMovie","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfb7ca63.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport { getMovie } from '../../api';\n// import { MovieData } from '../../types/MovieData';\n// import { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\n// const defaultMovie = {\n//   title: '',\n//   description: '',\n//   imgUrl: '',\n//   imdbUrl: '',\n//   imdbId: '',\n// };\n\ninterface Props {\n  addMovie: (movie: Movie) => void;\n}\n\nconst defaultImage\n  = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [movieTitle, setMovieTitle] = useState('');\n  const [movieIsNotFound, setMovieIsNotFound] = useState(false);\n  const [movie, setMovie] = useState<Movie>();\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          setLoading(true);\n\n          getMovie(movieTitle)\n            .then((result) => {\n              if ('Error' in result) {\n                setMovieIsNotFound(true);\n              } else {\n                setMovie({\n                  title: result.Title,\n                  description: result.Plot,\n                  imgUrl: result.Poster !== 'N/A'\n                    ? result.Poster : defaultImage,\n                  imdbUrl: `https://www.imdb.com/title/${result.imdbID}`,\n                  imdbId: result.imdbID,\n                });\n              }\n            })\n            .finally(() => setLoading(false));\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={movieTitle}\n              onChange={event => {\n                setMovieTitle(event.target.value);\n                setMovieIsNotFound(false);\n              }}\n            />\n          </div>\n\n          {movieIsNotFound && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={`button ${loading ? 'is-loading' : 'is-light'}`}\n              disabled={!movieTitle.length}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  addMovie(movie);\n                  setMovieTitle('');\n                  setMovie(undefined);\n                }}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=8046b227';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={\n          ((newMovie: Movie) => {\n            if (!movies.find(movie => movie.imdbId === newMovie.imdbId)) {\n              setMovies([...movies, newMovie]);\n            }\n          })\n        }\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}